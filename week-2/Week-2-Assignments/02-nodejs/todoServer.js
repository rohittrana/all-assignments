/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  const path = require('path');
  
  const app = express();
  app.use(bodyParser.json());
  
  const dataFilePath = path.join(__dirname, 'todos.json');
  
  // Load todos from file or initialize an empty array
  let todos = [];
  if (fs.existsSync(dataFilePath)) {
    const data = fs.readFileSync(dataFilePath, 'utf-8');
    todos = JSON.parse(data);
  }
  
  // Save todos to file
  const saveTodosToFile = () => {
    fs.writeFileSync(dataFilePath, JSON.stringify(todos, null, 2));
  };
  
  // Generate unique ID
  const generateId = () => {
    return todos.length > 0 ? Math.max(...todos.map((todo) => todo.id)) + 1 : 1;
  };
  
  // 1. GET /todos - Retrieve all todo items
  app.get('/todos', (req, res) => {
    res.status(200).json(todos);
  });
  
  // 2. GET /todos/:id - Retrieve a specific todo item by ID
  app.get('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const todo = todos.find((todo) => todo.id === id);
  
    if (!todo) {
      return res.status(404).send('Todo not found');
    }
  
    res.status(200).json(todo);
  });
  
  // 3. POST /todos - Create a new todo item
  app.post('/todos', (req, res) => {
    const { title, description } = req.body;
  
    if (!title || !description) {
      return res.status(400).send('Title and description are required');
    }
  
    const newTodo = {
      id: generateId(),
      title,
      description,
      completed: false,
    };
  
    todos.push(newTodo);
    saveTodosToFile();
  
    res.status(201).json({ id: newTodo.id });
  });
  
  // 4. PUT /todos/:id - Update an existing todo item by ID
  app.put('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const { title, description, completed } = req.body;
  
    const todo = todos.find((todo) => todo.id === id);
  
    if (!todo) {
      return res.status(404).send('Todo not found');
    }
  
    if (title) todo.title = title;
    if (description) todo.description = description;
    if (typeof completed === 'boolean') todo.completed = completed;
  
    saveTodosToFile();
    res.status(200).send('Todo updated successfully');
  });
  
  // 5. DELETE /todos/:id - Delete a todo item by ID
  app.delete('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const index = todos.findIndex((todo) => todo.id === id);
  
    if (index === -1) {
      return res.status(404).send('Todo not found');
    }
  
    todos.splice(index, 1);
    saveTodosToFile();
  
    res.status(200).send('Todo deleted successfully');
  });
  
  // Handle undefined routes - 404 error
  app.use((req, res) => {
    res.status(404).send('Not Found');
  });
  
  // Export the app for testing or further usage
  module.exports = app;
  
  // Run the server on port 3000
  if (require.main === module) {
    app.listen(3000, () => {
      console.log('Server is running on http://localhost:3000');
    });
  }
  

module.exports = app;
